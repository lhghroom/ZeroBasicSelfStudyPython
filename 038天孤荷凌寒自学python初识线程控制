孤荷凌寒自学python第三十八天初识python 的线程控制

github:
https://github.com/lhghroom/ZeroBasicSelfStudyPython


（完整学习过程屏幕记录视频地址在文末，手写笔记在文末）
线程
在操作系统中存在着很多的可执行的应用程序，每个应用程序启动后，就可以看着是一个进程，当打开WINDOWS任务管理器时，在任务管理器的进程选项卡中列出的就是一个一个的进程，基本上每个应用程序都对应着至少一个进程。
在同一进程中，也许同时在做着不止一件事情，比如在向程序界面上显示信息和接受信息的同时，程序也在和远端服务器通信读取数据，则这儿至少有两个线程运行在同一个进程中。
我的简单理解是，在同一个操作系统的进程中，可以同时执行多个线程的任务。

threading模块
threading模块是Python 中主要的线程控制模块。
使用threading模块前必须先声明引用：
import threading

threading模块的常见子类与属性和方法
1
threading.activeCount()
执行此方法返回当前进程下所有活动的线程总数。

2
threading.enumerate()
此方法直接返回一个 迭代器，迭代器中包含了，所有当前进程下的所有线程的信息。
在实际测试中，发现在循环打印时，总是不打印出第0个线程的信息，没有核准原因。
见后面的测试代码与结果。

3
threading.Thread
这是threading模块下的子模块（类），特别注意Thread模块的首字母是大写的。这是最容易疏忽之处。

获取或定义得到一个threading.Thread线程对象
可以通过以下方式得到threading.Thread线程对象
1．第一种：
thread对象=threading.Thread(target=要让新线程执行的函数名 , args=这个函数需要的参数组成的元组)
测试代码：
def f1(n):
    strtime=str(datetime.now())
    print('线程' + n + '正在运行中....线程启动于：' + strtime)

t=threading.Thread(target=f1,args=('t1',))
上面代码中，我创建了一个线程对象 t ,这个线程如果启动，将执行函数f1定义好的内部代码块。
Thread类的建构代码（初始化函数）中，要求传递的两个实参，只能按【关键字参数】形式传递进去。

2．第二种
thread对象=threading.Thread(target=要调用的作为函数用的类名(此类的初始化方法需要的参数列表))
测试代码：
class myt(object):

    def __init__(self,n):
        self.n=n

    def __call__(self):
        strtime=str(datetime.now())
        print('线程' + self.n + '正在运行中....线程启动于：' + strtime)

t=threading.Thread(target=myt('t1'))
这种方式中，线程t启动后，将执行的是一个可以当着函数来调用的类myt.
myt是一个可以被 当着函数来使用的类，因为在类的内部代码块中定义有：__call__（）私有方法。
与第一种方式不同的地方在于，这次只向Thread初始化方法传递了一个关键字实参target。

3．第三种方式
直接写一个新的继承自threading.Thread类的子类，然后，用新的类来初始化得到一个thread对象。
测试代码：
class myt(threading.Thread):

    def __init__(self,n):
        threading.Thread.__init__(self)
        self.n=n

    def run(self):
        strtime=str(datetime.now())
        print('线程' + self.n + '正在运行中....线程启动于：' + strtime)

t=myt('t1')
首先建构了一个继自threading.Thread的类 myt，这个类的特点有：
（1）在子类的__init__()方法中，必须 先调用父类的__init__()方法，在我的上机测试过程中（见过程屏幕录像，这儿反复出错，结果发现就是没有先调用父类的__init()__方法，引发的错误。
而原因在测试当时没有思考出来，所以大家在我的测试屏幕录像中可以看到没有想明白，现在思考下，发现可能是因为在threading.Thread类本身的__init__（）中要执行非常重要的初始化操作，才能保证thread本类实例化后的对象功能可用，我找到了threading.Thread类本身的__init__（）方法的代码如下：

    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, *, daemon=None):
        """This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form "Thread-N" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        """
        assert group is None, "group argument must be None for now"
        if kwargs is None:
            kwargs = {}
        self._target = target
        self._name = str(name or _newname())
        self._args = args
        self._kwargs = kwargs
        if daemon is not None:
            self._daemonic = daemon
        else:
            self._daemonic = current_thread().daemon
        self._ident = None
        self._tstate_lock = None
        self._started = Event()
        self._is_stopped = False
        self._initialized = True
        # sys.stderr is not stored in the class like
        # sys.exc_info since it can be changed between instances
        self._stderr = _sys.stderr
        # For debugging and _after_fork()
        _dangling.add(self)

以上代码可以证明我的猜测是正确的，因此在测试屏幕录像中我没有想通的问题现在基本上有答案了，当然正确与否希望大家批评指正。
(2)在定义继承自threading.Thread类的子类中，__call__()方法 需要被 改名为 run()方法。

threading.Thread对象的主要属性与方法有：
1 name属性
此属性可读写，用以设置和获取线程对象的名称。

2 getName()方法
用于获取线程对象的名称。

3 setName()方法
用于设置线程对象的名称。

4 ident
此属性是只读的，获取线程对象的标识码，标识码是数字。

5 is_alive()   isAlive()
这两个方法用于判断线程对象是否正在运行（存活），返回布尔对象。

6 join()
这是线程对象非常 重要 的方法，此方法有一个可选 形参 timeout
执行线程的此方法后，会将调用 此线程的上级线程 阻塞，然后等待此线程执行完成，如果为join()方法设置了timeout时间，那么从此线程开始执行起计时，达到timeout指定的时间限额时，将自动解除对上级线程的阻塞。
在今天 的测试过程中，没有着重测试此方法的具体功用，理解可能不完全准确。

7 start()
线程执行此方法后，线程就开始执行指定任务，同时线程的isAlive标识将显示为True
此外，我没有发现线程有stop()方法，目前也没有研究到中止指定线程执行的其它方法。

测试代码一 ：
import threading
from datetime import datetime

intcount=3

class myt(object):

    def __init__(self,n):
        self.n=n

    def __call__(self):
        strtime=str(datetime.now())
        print('线程' + self.n + '正在运行中....线程启动于：' + strtime)

def main():
    threads=[]
    x=range(intcount)
    for n in x:
        t=threading.Thread(target=myt('t' + str(n)))
        #if n==1:
        #    t.setDaemon(True)
        t.name='t' + str(n)
        threads.append(t)

    for n in x:
        threads[n].start()

    #print(threading.activeCount())
    for item in threading.enumerate():
        print(item)

    print('--------')

    for item in threads:
        print(item)

    print(threads[0].isAlive())

    for n in x:
        threads[n].join()

if __name__=='__main__':
    main()
执行结果：
线程t0正在运行中....线程启动于：2018-08-16 17:31:08.939618
线程t1正在运行中....线程启动于：2018-08-16 17:31:08.939618
线程t2正在运行中....线程启动于：2018-08-16 17:31:08.940647
<_MainThread(MainThread, started 4436)>

<Thread(t1, stopped 2444)>
<Thread(t2, stopped 8676)>
--------
<Thread(t0, stopped 3188)>
<Thread(t1, stopped 2444)>
<Thread(t2, stopped 8676)>
False
测试代码二：
import threading
from datetime import datetime

intcount=3

class myt(threading.Thread):

    def __init__(self,n):
        threading.Thread.__init__(self)
        self.n=n

    def run(self):
        strtime=str(datetime.now())
        print('线程' + self.n + '正在运行中....线程启动于：' + strtime)

def main():
    threads=[]
    x=range(intcount)
    for n in x:
        t=myt('t' + str(n))
        #if n==1:
        #    t.setDaemon(True)
        t.name='t' + str(n)
        threads.append(t)

    for n in x:
        threads[n].start()

    #print(threading.activeCount())
    for item in threading.enumerate():
        print(item)

    print('--------')

    for item in threads:
        print(item)

    print(threads[0].isAlive())

    for n in x:
        threads[n].join()

if __name__=='__main__':
    main()
执行结果：
线程t0正在运行中....线程启动于：2018-08-16 17:32:36.893226
线程t1正在运行中....线程启动于：2018-08-16 17:32:36.894223
线程t2正在运行中....线程启动于：2018-08-16 17:32:36.895221
<_MainThread(MainThread, started 8884)>

<myt(t2, stopped 8940)>
--------
<myt(t0, stopped 7152)>
<myt(t1, stopped 8744)>
<myt(t2, stopped 8940)>
False
注意执行结果中，threading.enumerate()方法返回的迭代器在循环取出对象时，总没有完整打印，且有空行。这点没有思考出答案。搜索网络没有找到答案，还有待继续思考，并恳请高手予以指点。

就是要学  社群  www.941xue.com/index.aspx 
 原文地址：http://www.941xue.com/content.aspx?id=1340     
本笔记在B站上的视频地址：      https://www.bilibili.com/video/BV1dt411v7ep/  
Github:
https://github.com/lhghroom/ZeroBasicSelfStudyPython 

【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 


我的学习过程录像百度盘地址分享如下：（清晰度：1280x720）
链接：https://pan.baidu.com/s/1n00vs2zpHiMCCf5eqykGrg  
提取码：bgu2

Bilibili:
https://www.bilibili.com/video/av38088874/ 

喜马拉雅语音笔记：
https://www.ximalaya.com/keji/19103006/144900713 
