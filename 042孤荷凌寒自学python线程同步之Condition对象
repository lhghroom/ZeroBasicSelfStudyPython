孤荷凌寒自学python第四十二天python 的线程同步之Condition对象

（完整学习过程屏幕记录视频地址在文末，手写笔记在文末）
今天学习了Condition对象，发现它综合了Event对象与Lock对象的特点，在使用和功能上更为丰富。
得到Condition对象
新的Condition对象=threading. Condition ([Lock | RLock])
使用Condition对象之前，必须保证当前py文档已声明引用过threading模块：
import threading
可以为新的Condition对象传递一个Lock或RLock对象，这样的话，如果 存在多个Condition对象就可以共用一个Lock对象来操纵各个线程。如果 没有为新的Condition对象传递一个Lock或RLock对象，那么也没有关系，在Condition对象的内部会自动创建一个RLock对象来供自己使用。

Condition对象的主要方法
Condition对象有四个最常用的主要方法：
1
Condition对象 . acquire()
此方法直接传递给Condition对象的Lock对象使用，与Lock对象的作用一样，用于获取锁，并让并行的其它线程处于不执行状态，让当前 线程独占运行。
2
Condition对象 . release()
此方法也直接传递给Condition对象的Lock对象使用，与Lock对象的作用一样，用于释放对锁的锁定。
3
Condition对象 . notify()
必须在acquire方法执行之后才能执行此方法，否则 就会报错。
执行此方法后，会通知线程池中处于wait状态的其中一个线程，让它尝试获取锁并继续运行。
注意此方法并不自动释放锁，因此执行完此方法后，一般应当马上执行release方法。
4
Condition对象 . wait()
必须在acquire方法执行之后才能执行此方法，否则 就会报错。
执行此方法后，会将当前线程放入wait线程池中，也就是让当前 线程处于wait状态。
注意此方法并不自动释放锁，因此执行完此方法后，一般应当马上执行release方法。

将文件由两个线程反复同步写和读的实现由Condition对象来实现
代码如下：
import threading
from datetime import datetime
from time import sleep

strf='1.txt'

def read():
    n=3
    while n:
    
            E.acquire()
            with open(strf,'r',encoding='utf-8') as f:
                lstA=f.readlines()
            #读文件的时候，尽快将文件中的内容读取出来 ，就马上离开with语句块，使操作的文件尽快关闭。
            # 意思就是说，不要在操作文件的with语句块中放太多语句，全要操作的文件处于独占打开模式，这会影响其它进程对同一文件的操作。 
            #sleep(1)
            print('读取第' + str(n) + '次' + str(lstA)  + '\n')
            E.notify()
            E.wait()
            E.release()

            n-=1
        
def write():
    n=3
    
    while n:

        E.acquire()
        with open(strf,'w',encoding='utf-8') as f:
            lstA=['写入','第' + str(n) + '次']
            f.writelines(lstA)
        #sleep(1)
        print(str(lstA) + '\n')  
        E.notify()
        E.wait()
        E.release()       

        n-=1
        

    
def main():
    tread=threading.Thread(target=read)
    twrite=threading.Thread(target=write)

    twrite.start()
    tread.start()
  

    twrite.join()
    tread.join()
    
    print('主线程结束。')
   

if __name__=='__main__':
    E=threading.Condition()

    main()
运行结果如下：
['写入', '第3次']

读取第3次['写入第3次']

['写入', '第2次']

读取第2次['写入第2次']

['写入', '第1次']

读取第1次['写入第1次']

主线程结束。
从结果中看出，三次写入是成功的，且读写交替进行，符合同步要求，且读写没有冲突。
只是程序在执行完成后却发生死锁，且我没有能够定位问题出在哪儿。恳请高人指点迷津。

四、Condition对象最好的用处是解决生产者和消费者针对 商品存放库存的操作。
下面是代码：
import threading
from time import sleep

c=0 #表示产品池中产品的数量,这个产品池最终只能装20个产品
d=threading.Condition()

class 生产者(threading.Thread):
    
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        global c
        while True:
            d.acquire()
            if c<20 :
                c+=1
                print('生产者生产了1个产品放到池中，现在产品数量：' + str(c))
                d.notify() #生产者生产完产品，提示消费者可以购买了
            else:
                #现在产品池c中已经有20个产品，就不要生产
                print('生产者处于等待中。')
                d.wait()
            d.release() 
            sleep(1)
class 消费者(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        global c
        while True:
            d.acquire()
            if c>=1 :
                c-=1
                print('消费者购买走了1个产品，现在产品数量 ' + str(c))
                d.notify() #消费者购买走了产品，提示生产者产品池中数量 可以减少，看是否需要生产新产品
            else:
                #现在产品池c中一个产品都没有，消费者无法购买产品
                print('消费者处于等待中。')
                d.wait()
            d.release()
            sleep(1)
def main():
    n=5
    ss=[]
    xx=[]
    while n:
        s=生产者()
        ss.append(s)
        s.start()
        n-=1

    n=3
    while n:
        x=消费者()
        xx.append(x)
        x.start()
        n-=1
        
    n=5
    while n:
        ss[n-1].join()
        n-=1

    n=3
    while n:
        xx[n-1].join()
        n-=1
        
    print('主线程结束。')

if __name__=='__main__':
    main()


运行结果如下：（因为此程序会不停循环，因此下面只是部分执行结果）
生产者生产了1个产品放到池中，现在产品数量：1
生产者生产了1个产品放到池中，现在产品数量：2
生产者生产了1个产品放到池中，现在产品数量：3
生产者生产了1个产品放到池中，现在产品数量：4
生产者生产了1个产品放到池中，现在产品数量：5
消费者购买走了1个产品，现在产品数量 4
消费者购买走了1个产品，现在产品数量 3
消费者购买走了1个产品，现在产品数量 2
生产者生产了1个产品放到池中，现在产品数量：3
生产者生产了1个产品放到池中，现在产品数量：4
生产者生产了1个产品放到池中，现在产品数量：5
生产者生产了1个产品放到池中，现在产品数量：6
生产者生产了1个产品放到池中，现在产品数量：7
消费者购买走了1个产品，现在产品数量 6
消费者购买走了1个产品，现在产品数量 5
消费者购买走了1个产品，现在产品数量 4
生产者生产了1个产品放到池中，现在产品数量：5
消费者购买走了1个产品，现在产品数量 4
消费者购买走了1个产品，现在产品数量 3
生产者生产了1个产品放到池中，现在产品数量：4
生产者生产了1个产品放到池中，现在产品数量：5
生产者生产了1个产品放到池中，现在产品数量：6
生产者生产了1个产品放到池中，现在产品数量：7
消费者购买走了1个产品，现在产品数量 6
生产者生产了1个产品放到池中，现在产品数量：7
消费者购买走了1个产品，现在产品数量 6
消费者购买走了1个产品，现在产品数量 5
生产者生产了1个产品放到池中，现在产品数量：6
生产者生产了1个产品放到池中，现在产品数量：7
生产者生产了1个产品放到池中，现在产品数量：8
生产者生产了1个产品放到池中，现在产品数量：9
消费者购买走了1个产品，现在产品数量 8
生产者生产了1个产品放到池中，现在产品数量：9
消费者购买走了1个产品，现在产品数量 8
生产者生产了1个产品放到池中，现在产品数量：9
消费者购买走了1个产品，现在产品数量 8
生产者生产了1个产品放到池中，现在产品数量：9
生产者生产了1个产品放到池中，现在产品数量：10
生产者生产了1个产品放到池中，现在产品数量：11
消费者购买走了1个产品，现在产品数量 10


就是要学  社群  www.941xue.com/index.aspx 
 原文地址：http://www.941xue.com/content.aspx?id=1364 
本笔记在B站上的视频地址：      https://www.bilibili.com/video/BV1Zt411v7zg/  
Github:
https://github.com/lhghroom/ZeroBasicSelfStudyPython 

【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 

我的学习过程录像百度盘地址分享如下：（清晰度：1280x720）
链接：https://pan.baidu.com/s/1ra1OGE9xNTw7gEK5xSVr6A  
提取码：ycor

Bilibili:
https://www.bilibili.com/video/av38090589/ 

喜马拉雅语音笔记：
https://www.ximalaya.com/keji/19103006/145980033 
