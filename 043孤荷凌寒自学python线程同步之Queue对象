孤荷凌寒自学python第四十三天python 的线程同步之Queue对象

（完整学习过程屏幕记录视频地址在文末，手写笔记在文末）
Queue对象是直接操作队列池的对象，队列中可以存放多种对象，当然也就可以存放线程对象，将多个线程对象存放于队列 池中之后，就能非常显式的操作各个线程，非常方便。这是今天学习Queue的皮毛之后的感受，第一次感觉对线程有了非常完全的掌控，不像最初学习Lock与RLock那样，那时感觉完全没有掌控住线程。
引用queue模块
Queue来自于模块queue
注意queue模块的首字母是小写的；而类名称Queue的名称首字母是大写的。
因此使用前必须 声明引用queue模块：
import queue

得到queue模块中的三个相关队列类的对象实体（测试代码统一在后测试）
在queue模块中其实有三个与队列相关的类
1
Queue
新的Queue对象=queue. Queue ([maxsize])
Queue是指一个 先进先出 的队列，即先进入队列 的对象，取出时也先被取出来。
缩写为：Fifo （First  in   first  out）

2
LifoQueue
新的LifoQueue对象=queue. LifoQueue ([maxsize])
LifoQueue是指一个 后进先出 的队列，即后进入队列 的对象，取出时却会被先取出来。
缩写为：Lifo （Last  in   first  out）

3
PriorityQueue
新的PriorityQueue对象=queue. PriorityQueue ([maxsize])
PriorityQueue是指一个 优先级 队列，即不管进入队列 的顺序如何，取出时都按对象标注的 优先级 来安排 取出顺序，优先级数字小的对象会被优先取出来 。
由于初学乍到，没有深入学习PriorityQueue，发现它的用法较前两个对象是不同的。

【maxsize】可选形参如果指定 了大于0的实际参数，那么 就表示指定了这个队列对象的 最大容量（就是说可以容下多少个对象）。如果没有指定这个形参的实参或指定的实参小于1，那么都表示这个队列 的容量是无限大的。

Queue对象的主要方法（测试代码统一在后测试）
1
Queue对象 . put(对象[,block=True[,timeout=0]])
此方法用于将一个对象放入队列中，其中可选形参block=True,说明默认值是True,此时表示放入队列是阻塞式的，阻塞线程的时间由timeout决定。
关于阻塞式放入，我目前的理解是，如果 队列 的最大容量已经满了，但也要等待队列中有空位时才将对象放入。这种情况下不会报错，因为在阻塞下等待队列中有空位发生，就马上放进去。不过如果 指定有timeout时间，则时间用完就不再阻塞以等待了。
如果 block=False,那么一旦队列中没有空位以将对象放入队列中，那么，就直接报错。

2
Queue对象 . get([,block=True[,timeout=0]])
此方法将取出队列中当前按优先顺序应当被取出来 的下一个对象，将返回一个对象。
其中可选形参block=True,说明默认值是True,此时表示取出队列中的元素是阻塞式的，阻塞线程的时间由timeout决定。
关于阻塞式取出，我目前的理解是，如果 队列 中已经没有 对象了(队列为空)，但也要等待队列中有对象时才继续取出。这种情况下不会报错，因为在阻塞下等待队列中有对象发生，就马上取出来 。不过如果 指定有timeout时间，则时间用完就不再阻塞以等待了。
如果 block=False,那么一旦队列中已经没有对象供取出，那么，就直接报错。

3
Queue对象 . qsize()
得到队列中当前的对象个数。

4
Queue对象 . maxsize()
得到队列中当前定义时设定的最大容量个数。

5
Queue对象 . empty()
此方法将返回队列是否已经为空，将返回一个布尔对象。

6
Queue对象 . not_empty()
此方法将返回队列是否不是空的，将返回一个布尔对象。

7
Queue对象 . full()
此方法将返回队列是否已经装满，将返回一个布尔对象。

8
Queue对象 . join()
执行此方法将等待队列中所有元素都被取出，队列为空时才执行后续操作。



将文件由两个线程反复同步写和读的实现由Queue队列来实现
代码如下：
import threading
import queue
from datetime import datetime
from time import sleep

strf='1.txt'

def read(n):
            
            with open(strf,'r',encoding='utf-8') as f:
                lstA=f.readlines()
            
            print('读取第' + str(n) + '次' + str(lstA)  + '\n')

        
def write(n):

        with open(strf,'w',encoding='utf-8') as f:
            lstA=['写入','第' + str(n) + '次']
            f.writelines(lstA)
        #sleep(1)
        print(str(lstA) + '\n')  

        

    
def main():
    q=queue.Queue(20)
    x=range(10)
    for n in x:
        tread=threading.Thread(target=read,args=(n,))
        twrite=threading.Thread(target=write,args=(n,))
        q.put(twrite)
        q.put(tread)
    x=range(20)
    for n in x:
        t=q.get()

        print('当前队列中还有对象：' + str(q.qsize()) + '个\n')

        t.start()
        t.join()

    #q.join()

    print('主线程结束。')

if __name__=='__main__':

    main()


运行结果如下：
当前队列中还有对象：19个

['写入', '第0次']

当前队列中还有对象：18个

读取第0次['写入第0次']

当前队列中还有对象：17个

['写入', '第1次']

当前队列中还有对象：16个

读取第1次['写入第1次']

当前队列中还有对象：15个

['写入', '第2次']

当前队列中还有对象：14个

读取第2次['写入第2次']

当前队列中还有对象：13个

['写入', '第3次']

当前队列中还有对象：12个

读取第3次['写入第3次']

当前队列中还有对象：11个

['写入', '第4次']

当前队列中还有对象：10个

读取第4次['写入第4次']

当前队列中还有对象：9个

['写入', '第5次']

当前队列中还有对象：8个

读取第5次['写入第5次']

当前队列中还有对象：7个

['写入', '第6次']

当前队列中还有对象：6个

读取第6次['写入第6次']

当前队列中还有对象：5个

['写入', '第7次']

当前队列中还有对象：4个

读取第7次['写入第7次']

当前队列中还有对象：3个

['写入', '第8次']

当前队列中还有对象：2个

读取第8次['写入第8次']

当前队列中还有对象：1个

['写入', '第9次']

当前队列中还有对象：0个

读取第9次['写入第9次']

主线程结束。

从结果中看出，读写各十次都是成功的，且读写交替进行，符合同步要求，且读写没有冲突。

将文件由两个线程反复同步写和读的实现由LifoQueue队列来实现
代码如下：
import threading
import queue
from datetime import datetime
from time import sleep

strf='1.txt'

def read(n):    
            with open(strf,'r',encoding='utf-8') as f:
                lstA=f.readlines()
            
            print('读取第' + str(n) + '次' + str(lstA)  + '\n')


        
def write(n):
        with open(strf,'w',encoding='utf-8') as f:
            lstA=['写入','第' + str(n) + '次']
            f.writelines(lstA)
        #sleep(1)
        print(str(lstA) + '\n')  

        

    
def main():
    x=range(10)
    q=queue.LifoQueue(20)
    for n in x :
        tread=threading.Thread(target=read,args=(n,))
        twrite=threading.Thread(target=write,args=(n,))
        q.put(tread)       
        q.put(twrite)

    

    x=range(q.maxsize)
    for n in x:
        t=q.get()
        t.start()
        t.join()
 
    print('主线程结束。')

if __name__=='__main__':
   

    main()

运行结果：
['写入', '第9次']

读取第9次['写入第9次']

['写入', '第8次']

读取第8次['写入第8次']

['写入', '第7次']

读取第7次['写入第7次']

['写入', '第6次']

读取第6次['写入第6次']

['写入', '第5次']

读取第5次['写入第5次']

['写入', '第4次']

读取第4次['写入第4次']

['写入', '第3次']

读取第3次['写入第3次']

['写入', '第2次']

读取第2次['写入第2次']

['写入', '第1次']

读取第1次['写入第1次']

['写入', '第0次']

读取第0次['写入第0次']

主线程结束。

就是要学  社群  www.941xue.com/index.aspx 
 原文地址：http://www.941xue.com/content.aspx?id=1371 
本笔记在B站上的视频地址：      https://www.bilibili.com/video/BV1Zt411v7uF/
Github:
https://github.com/lhghroom/ZeroBasicSelfStudyPython 

【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 


我的学习过程录像百度盘地址分享如下：（清晰度：1280x720）
链接：https://pan.baidu.com/s/19BbmLmhXRgtdSXWMWtmabw 
提取码：dy3p

Bilibili:
https://www.bilibili.com/video/av38090801/ 

喜马拉雅语音笔记：
https://www.ximalaya.com/keji/19103006/146250540 



