
粗俗地区分列表，可以这样理解，定义或print列表后显示时，列表中的各元素都是用一个方括号[]括起来的。
即列表看起来总是这样的：
lstA=[1,3,5,7,9]
lstB=[‘我’,’爱’,’祖’,’国’]

同其它序列一样，要访问列表的元素，直接引用元素在序列中的index值即可
lstA[0]    值是：1
lstB[-1]   值是：‘国’

一、	将其它序列强制转换成列表
新得到的列表对象 = list(其它序列对象)

如：
>>> strTemp='孤荷凌寒'
>>> lstTemp=list(strTemp)  #将字符串强制转换成列表
>>> print(lstTemp)
['孤', '荷', '凌', '寒']
二、	其它序列如：元组、字符串等，都是不能直接改变序列中元素的内容的，包括修改元素值、增加新元素、删除元素、分片赋值等操作。
而列表是允许进行内容修改的序列。
三、	列表元素的重新赋值
如：
>>> strTemp='孤荷凌寒'
>>> lstTemp=list(strTemp)  #将字符串强制转换成列表
>>> print(lstTemp)
['孤', '荷', '凌', '寒']
>>> lstTemp[0]='大'   #对列表的index值为0的元素重新赋值
>>> print(lstTemp)
['大', '荷', '凌', '寒']    #列表中指定元素的值被修改了
四、	向列表中添加元素
使用append方法
如：
>>> strTemp='孤荷凌寒'
>>> lstTemp=list(strTemp)  #将字符串强制转换成列表
>>> print(lstTemp)
['孤', '荷', '凌', '寒']
>>> lstTemp[0]='大'   #对列表的index值为0的元素重新赋值
>>> print(lstTemp)
['大', '荷', '凌', '寒']    #列表中指定元素的值被修改了
>>> lstTemp.append('帅')    #向列表的最后添加一个元素’帅’
>>> print(lstTemp)
['大', '荷', '凌', '寒', '帅']
五、	删除元素
使用全局del函数
>>> del lstTemp[0]   #删除列表index值为0的元素
>>> print(lstTemp)
['荷', '凌', '寒', '帅']
六、	分片赋值
分片赋值是指先取出列表中指定的切片段，然后直接通过=进行赋值，=的右边是值组成的列表，此列表的元素个数可以不与切片段中的元素个数相同。
>>> print(lstTemp)
['荷', '凌', '寒', '帅']
>>> lstTemp[3:]=list('非常帅')  # lstTemp[3:]这个分片（切片）中只有一个元素，值为‘帅’，=号右边却赋值了一个三个元素的列表。
>>> print(lstTemp)
['荷', '凌', '寒', '非', '常', '帅']
七、	向列表中指定位置插入元素
操作与分片赋值一样，只是在分片（切片）时，指定的起始和结束index值是一样的，如：lstTemp(1:1)    lstTemp(2:2)
表示 在此index值的元素之前的位置插入若干个新元素。
>>> print(lstTemp)
['荷', '凌', '寒', '非', '常', '帅']
>>> lstTemp[0:0]='孤'  #插入元素’孤’到index值为0的元素之前的位置
>>> print(lstTemp)
['孤', '荷', '凌', '寒', '非', '常', '帅']
八、	通过分片赋值方式删除一个区段切片中的多个元素
这与第六点分片赋值完全一样，只是在赋值式的=号右边是一个空列表。
>>> print(lstTemp)
['孤', '荷', '凌', '寒', '非', '常', '帅']
>>> lstTemp[4:7]=[]   #=右边赋值的是一个空列表，就等同于删除了切片部分的元素
>>> print(lstTemp)
['孤', '荷', '凌', '寒']

九、	书写序列的分片代码时，最容易犯的错误是，将分隔起止index值的符号 ： 写成 ， 号。
这是从其它编程语言转变过来造成的不适应。
如果分隔符号使用错误，会提示如下错误：
>>> lstTemp[4,7]=[]   #正确的写法是：lstTemp[4:7]=[]
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    lstTemp[4,7]=[]
TypeError: list indices must be integers or slices, not tuple


——————————
今天整理的学习笔记完成，最后例行说明下我的自学思路：
根据过去多年我自学各种编程语言的经历，认为只有真正体验式，解决实际问题式的学习才会有真正的效果，即让学习实际发生。在2004年的时候我开始在一个乡村小学自学电脑 并学习vb6编程语言，没有学习同伴，也没有高师在上，甚至电脑都是孤岛（乡村那时还没有网络），有的只是一本旧书，在痛苦的自学摸索中，我找到适应自己零基础的学习方法：首先是每读书的一小节就作相应的手写笔记，第二步就是上机测试每一个笔记内容是否实现，其中会发现书中讲的其实有出入或错误，第三步就是在上机测试之后，将笔记改为电子版，形成最终的修订好的正确无误的学习笔记 。
通过反复尝试错误，在那个没有分享与交流的黑暗时期我摸黑学会了VB6，尔后接触了其它语言，也曾听过付费视频课程，结果发现也许自己学历果然太低，就算是零基础的入门课程，其实也难以跟上进度，讲师的教学多数出现对初学者的实际情况并不了解的情况，况且学习者的个体也存在差异呢？当然更可怕的是收费课程的价格往往是自己难以承受的。
于是我的所有编程学习都改为了自学，继续自己的三步学习笔记法的学习之路。
当然自学的最大问题是会走那么多的弯路，没有导师直接输入式的教学来得直接，好在网络给我们带来无限搜索的机会，大家在网络上的学习日志带给我们共享交流的机会，而QQ群等交流平台、网络社区的成立，我们可以一起自学，互相批评交流，也可以获得更有效，更自主的自学成果。
于是我以人生已过半的年龄，决定继续我的编程自学之路，开始学习python，只希望与大家共同交流，一个人的独行是可怕的，只有一群人的共同前进才是有希望的。
诚挚期待您的交流分享批评指点！
欢迎联系我加入倡导终身学习终身成长的社群——
就是要学  社群  www.941xue.com/index.aspx 

原文地址：http://www.941xue.com/content.aspx?id=129

B站视频：https://www.bilibili.com/video/BV1Tt411U7J4/

