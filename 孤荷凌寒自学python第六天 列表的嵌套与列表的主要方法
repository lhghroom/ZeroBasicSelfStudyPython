（完整学习过程屏幕记录视频地址在文末，手写笔记在文末）
一、列表的嵌套
列表的嵌套可以理解为，将多个列表作为上层列表的其中的元素看待。
如：
[[1,2,3],[4,5,6]]
红色方括号所表示出的这个列表中有两个元素：
第0个元素：[1,2,3]
第1个元素：[4,5,6]
它的两个元素，本身又是列表对象。
因此称之为嵌套列表。
其实上面举例的嵌套列表，表示了两个维度。
是一个表格一样的两维数据矩阵。
所以也可以有更多维度的嵌套列表。
 
书写代码时可以直接将列表进行嵌套：
如：
>>> lstA=[1,2,3]
>>> lstB=[4,5,6]
>>> lstC=[lstA,lstB]    #此代码，将lstA,lstB这两个列表作为元素放入列表lstC中
>>> print(lstC)
[[1, 2, 3], [4, 5, 6]]
二、列表的方法
Python语言中，对象的方法，在代码书写上与其它语言一致，使用.连接符来表示对象的内部方法：
对象名.方法名（参数或可选参数）
参数或可选参数是指，需要传递给方法的一些初始值，以便方法对这些值进行运算。
如果是初学编程的朋友，可以这样解释下：
一个对象，你可以理解为现实生活中的一个企业或单位，那么这个企业或单位有它的名称、从业范围等等信息，这些信息我们称之为：对象的属性
而一个企业或单位也有它的可以执行的操作，比如加工客户送来的原材料成为指定的零件这个操作过程，把这样的企业或单位可以执行的内部操作，我们称之为对象的方法。
理解了对象的方法，那么就能理解方法名后面的参数或可选参数的意思了，以这儿举例的“加工客户送来的原材料成为指定的零件”这个方法为例，要完成这个方法，客户必须要给这个方法“原材料”，还要给告诉方法“要完成的零件的特征”，“原材料”与“要完成的零件的特征”等就称之为这个方法的“参数”。
可选参数是指，可以告诉方法，也可以不告诉方法的参数。
 
执行对象的一个方法后，方法可能会返回一个对象，这就好比刚才举的例子，“加工客户送来的原材料成为指定的零件”这个方法操作完成后，会返回给客户一个加工好的零件。
当然只是说，执行对象的一个方法后，可能会返回一个对象，但不是每个方法都会有返回对象，有的方法就不会返回任何内容。
 
三、列表对象的常用方法
1 append(obj)
向列表的最后追加一个元素，参数obj是要添加的元素对象
2 count(obj)
统计列表中值为obj对象的元素的总个数。
例：
>>> lstA=list('abcabcbcdcde')
>>> print(lstA.count('c'))
4
3 extend(otherlist)
将列表otherlist中的所有元素追加到当前列表序列中的元素后面
例 ：
>>> lstA=list('ab')
>>> lstB=list('CD')
>>> lstA.extend(lstB)   #此代码，将lstB中的两个元素‘C’，‘D’追加到lstA最后
>>> print(lstA)
['a', 'b', 'C', 'D']     #lstA中的元素发生的变化 ，而lstB的内容没有变化 。
4 index(obj)
返回列表中所有元素中第一个obj对象所在的index值。（序列的index值都从0开始计数）
例：
>>> lstA=list('大声说：我爱我的祖国')
>>> print(lstA)
['大', '声', '说', '：', '我', '爱', '我', '的', '祖', '国']
>>> intWO=lstA.index('我')
>>> print(intWO)
4
5 insert(index,obj)
在列表指定的第index个元素前插入新元素对象obj（序列的index值都从0开始计数）
例：
>>> lstA=list('我爱你')
>>> print(lstA)
['我', '爱', '你']
>>> lstA.insert(1,'很')
>>> print(lstA)
['我', '很', '爱', '你']
6 pop(index)   pop()
删除列表中的第index个元素（参数只能传入整数数字，表示列表中的元素的index位置，而不能传入元素对象本身）
如果没有指定要删除的第index个元素这个参数，那么，就会删除列表序列中的最后一个元素。
此方法有返回值，返回被删除的第index个元素对象的值。
例：
>>> lstA=list('abcd')
>>> print(lstA)
['a', 'b', 'c', 'd']
>>> strValue=lstA.pop()  #此处执行pop方法没有传入参数，则默认会删除列表的最后一个元素。
>>> print(strValue)
d
>>> print(lstA)
['a', 'b', 'c']
>>> strValue=lstA.pop('b')  #此处执行pop方法将元素对象本身作为参数传递进入，则会报错。
 
Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
    strValue=lstA.pop('b')
TypeError: 'str' object cannot be interpreted as an integer
>>> strValue=lstA.pop(1)   #此处执行pop方法传递了正确的参数，要删除元素的index值。
>>> print(strValue)
b
>>> print(lstA)
['a', 'c']
7 remove(obj)
移除列表中从左边起第一个被找到的obj元素。
例：
>>> lstA=list('大声说：我爱我的祖国')
>>> print(lstA)
['大', '声', '说', '：', '我', '爱', '我', '的', '祖', '国']
>>> lstA.remove('我')
>>> print(lstA)
['大', '声', '说', '：', '爱', '我', '的', '祖', '国']
8 reverse()
将列表序列中的元素的位置顺序完全颠倒，即进行序列反序。
此方法没有返回对象，或者说返回对象是None对象
例：
>>> lstA=list('abcdefg')
>>> print(lstA)
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> lstB=lstA.reverse()  #其实并没有返回值，所以lstB的值其实是None
>>> print(lstB)
None
>>> print(lstA)   #而lstA本身的元素顺序被颠倒了。
['g', 'f', 'e', 'd', 'c', 'b', 'a']
9  sort(func)  sort()
按函数func指明的算法对列表的元素进行重新排序。
如果不指明func函数名，则默认正序排序（正序如：从小到大）
此外还可以按关键字参数方式传入‘key=‘参数和‘reverse=[True/False]’参数
关键字参数reverse=True时表示按反序排序（反序如：从大到小）
关键字参数reverse=False时表示按正序排序。
关键字参数key指明排序模式，如key=len，表示字符串排序时，按长短排。
例：
>>> lstA=[3,5,7,8,9,2]
>>> lstA.sort()  #默认正序排序，对于数字类型的列表，则按从小到大顺序来排序
>>> print(lstA)
[2, 3, 5, 7, 8, 9]
>>> lstA.sort(reverse=True)  #指定了关键字参数reverse=False,则反序排序
>>> print(lstA)
[9, 8, 7, 5, 3, 2]
>>> lstB=['a','abc','bc','abcd']
>>> lstB.sort(key=len) #字符串列表排序，指定关键字参数，key=len，表示 按字符串长短排序
>>> print(lstB)
['a', 'bc', 'abc', 'abcd']
以上练习都没有为sort方法指定排序算法的函数，因为我目前还没有研究明白这个用法，后面再作具体研究。
10 clear()
完全清除列表中的所有元素，但列表对象本身还存在，没有被注销。
例：
>>> lstA=list('孤荷凌寒的QQ号是：578652607')
>>> print(lstA)
['孤', '荷', '凌', '寒', '的', 'Q', 'Q', '号', '是', '：', '5', '7', '8', '6', '5', '2', '6', '0', '7']
>>> lstA.clear()
>>> print(lstA)
[]
 
 
欢迎联系我加入倡导终身学习终身成长的社群——
就是要学  社群  www.941xue.com/index.aspx
 
原文地址：http://www.941xue.com/content.aspx?id=134
 
B站视频：https://www.bilibili.com/video/BV1mt411m7pb/
——————————
今天整理的学习笔记完成，最后例行说明下我的自学思路：
根据过去多年我自学各种编程语言的经历，认为只有真正体验式，解决实际问题式的学习才会有真正的效果，即让学习实际发生。在2004年的时候我开始在一个乡村小学自学电脑 并学习vb6编程语言，没有学习同伴，也没有高师在上，甚至电脑都是孤岛（乡村那时还没有网络），有的只是一本旧书，在痛苦的自学摸索中，我找到适应自己零基础的学习方法：首先是每读书的一小节就作相应的手写笔记，第二步就是上机测试每一个笔记内容是否实现，其中会发现书中讲的其实有出入或错误，第三步就是在上机测试之后，将笔记改为电子版，形成最终的修订好的正确无误的学习笔记 。
通过反复尝试错误，在那个没有分享与交流的黑暗时期我摸黑学会了VB6，尔后接触了其它语言，也曾听过付费视频课程，结果发现也许自己学历果然太低，就算是零基础的入门课程，其实也难以跟上进度，讲师的教学多数出现对初学者的实际情况并不了解的情况，况且学习者的个体也存在差异呢？当然更可怕的是收费课程的价格往往是自己难以承受的。
于是我的所有编程学习都改为了自学，继续自己的三步学习笔记法的学习之路。
当然自学的最大问题是会走那么多的弯路，没有导师直接输入式的教学来得直接，好在网络给我们带来无限搜索的机会，大家在网络上的学习日志带给我们共享交流的机会，而QQ群等交流平台、网络社区的成立，我们可以一起自学，互相批评交流，也可以获得更有效，更自主的自学成果。
于是我以人生已过半的年龄，决定继续我的编程自学之路，开始学习python，只希望与大家共同交流，一个人的独行是可怕的，只有一群人的共同前进才是有希望的。
诚挚期待您的交流分享批评指点！
 
欢迎联系我加入倡导终身学习终身成长的社群——
就是要学  社群  www.941xue.com/index.aspx
 
原文地址：http://www.941xue.com/content.aspx?id=134
 
B站视频：https://www.bilibili.com/video/BV1mt411m7pb/



