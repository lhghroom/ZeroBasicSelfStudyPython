一、	在python的函数中各种不同的形式参数在定义的先后顺序上有规定：
必须形式参数,可选形式参数,*可变形式参数,**关键字形式参数

二、	变量的作用范围（作用域）
1 局部变量
在函数内定义的变量，其作用范围默认情况下也就只在函数体内有效；
其中函数定义时定义的所有形式参数都算作函数内定义的变量；
函数内部的变量称之为【局部变量】
此外，当一个实参传递给函数的形参时，对于python而言，不存在【传址】和【传值】的说法！！因为在python中，所以的实参传递给函数的形参时，都只是将实参的【值】给了形参，也就是说将实参进行了【深复制】在内存中重新开辟了新的地址来复制了一份完全独立的值，再给了函数的形参。
这意味着，python函数体内部形式参数作为局部变量，不管它的值在运算中怎么改变，都不会影响到传递值给它的来自函数外部的实参。
这一点和其它某些语言有比较大的不同。
测试如下：
def func(我是形式参数):
    我是形式参数+=10
    我是函数内局部变量=我是形式参数
    print('我是形式参数在获取了实参的值后+10的结果是：',我是形式参数)
    print('我是函数内局部变量=',我是函数内局部变量)
    return
我是变量作实参=12
print('在作实参之前【我是变量作实参】=',我是变量作实参)
func(我是变量作实参)
print('在作实参之后【我是变量作实参】=',我是变量作实参)
print('下面在函数体之外访问函数的内部变量，因为它的作用域只在函数内部，所以下一语句必定报错：')
print('在函数体之外访问【我是函数内局部变量】=',我是函数内局部变量)
运算结果 ：
在作实参之前【我是变量作实参】= 12
我是形式参数在获取了实参的值后+10的结果是： 22
我是函数内局部变量= 22
在作实参之后【我是变量作实参】= 12
下面在函数体之外访问函数的内部变量，因为它的作用域只在函数内部，所以下一语句必定报错：
Traceback (most recent call last):
  File "c:\Users\pw\Desktop\新建文本文档.py", line 12, in <module>
    print('在函数体之外访问【我是函数内局部变量】=',我是函数内局部变量)
NameError: name '我是函数内局部变量' is not defined
	从上面的测试中可以看到，函数内部定义的【局部变量】包括函数定义时定义的【形式参数】它们的作用域只存在于函数体内部，一离开函数体，就不存在了。
	从测试中也看出，作为实参传递给函数形式参数的变量【我是变量作实参】在作函数实参前和作函数实参后，值都不变化 ，这就证明在python中，传递给函数形参的任何作函数 实参的变量都是安全的，这与其它一些编程语言是有区别的。

	2 全局变量
	全局变量其实也是一个相对的说法，一般来说，在同一个py文件中，在函数体之外定义的变量，对于函数体内的对象来说，就是一个全局变量。
如上一个测试例子中，对于函数【func】内部的所在对象来说，在函数之外定义的变量【我是变量作实参】就是一个全局变量。
	在函数内部是可以直接使用全局变量的；
	如果函数内部定义的变量与函数外定义的全局变量的命名是一样的，那么，在函数内部就都认为是局部变量，这是优先级的不同，即默认函数体自己内部定义的变量优先识别。
测试：
def func(x):
    print('在函数内部print,z=',z)
    y='局部部变量y'
    print('在函数内部Print,y=',y)
    print('函数的形参x刚获取实参的值时，在函数内部Print,x=',x)
    x=x.replace('全局','局部')
    print('在函数内部print，x=',x)
    return '函数处理后的x=' + x #将运算后的x作为函数的返回对象返回给函数外部

x='全局变量x'
y='全局变量y'
z='全局变量z'
a=func(x)
print('在函数外部print,x=',x)
print('在函数外部print,y=',y)
print('在函数外部print,z=',z)
print('打印函数返回值a变量print,a=',a)
运行结果 ：
在函数内部print,z= 全局变量z
在函数内部Print,y= 局部部变量y
函数的形参x刚获取实参的值时，在函数内部Print,x= 全局变量x
在函数内部print，x= 局部变量x
在函数外部print,x= 全局变量x
在函数外部print,y= 全局变量y
在函数外部print,z= 全局变量z
打印函数返回值a变量print,a= 函数处理后的x=局部变量x

三、	在函数内部也可以定义全局变量
由于python的函数的形式参数接收实际参数时，只是接收了实际参数的值，因此 在函数内部不管怎么运算都不会对作为实际参数的全局变量有任何改变。
然而在某些时候，我们其实还是需要在函数内部就直接修改掉全局变量的值的。
当然有一种方法是，因为函数内部可以直接访问全局变量，所以我们可以直接使用全局变量，然后修改值就行了；
然而在更特殊的情况下，我们还希望在函数内部就直接定义出一个全局变量，让函数外的对象也可以使用此函数内部定义的变量。

python提供了这样的实现方法，在函数内部想要定义一个全局变量时，只需要在变量名称前添加关键字 global 即可。
注意：在给变量添加global 关键字时，不能再在变量后面同时进行赋值。
测试：
x='全局变量x'
y='全局变量y'
z='全局变量z'
def func(x):
    global z
    z=z + '_在函数内部修改了一个全局变量z'
    print('在函数内部print,z=',z)
    global y
    y='局部部变量y'
    print('在函数内部Print,y=',y)
    print('函数的形参x刚获取实参的值时，在函数内部Print,x=',x)
    x=x.replace('全局','局部')
    print('在函数内部print，x=',x)
    return '函数处理后的x=' + x #将运算后的x作为函数的返回对象返回给函数外部

a=func(x)
print('在函数外部print,x=',x)
print('在函数外部print,y=',y)
print('在函数外部print,z=',z)
print('打印函数返回值a变量print,a=',a)
运行结果:
在函数内部print,z= 全局变量z_在函数内部修改了一个全局变量z
在函数内部Print,y= 局部部变量y
函数的形参x刚获取实参的值时，在函数内部Print,x= 全局变量x
在函数内部print，x= 局部变量x
在函数外部print,x= 全局变量x
在函数外部print,y= 局部部变量y
在函数外部print,z= 全局变量z_在函数内部修改了一个全局变量z
打印函数返回值a变量print,a= 函数处理后的x=局部变量x
与前一个测试例子一比较，就可以发现global关键字的神奇作用。

欢迎联系我加入倡导终身学习终身成长的社群——
就是要学  社群  www.941xue.com/index.aspx 
 
原文地址：http://www.941xue.com/content.aspx?id=185
B站视频：https://www.bilibili.com/video/BV14t411U71B/
